// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String @id @default(uuid())
  name       String
  userId     String
  billboard  Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  products        Product[]  @relation("StoreToProduct")
  size       Size[] @relation("StoreToSize")
  color      Color[] @relation("StoreToColor")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
// mỗi lần tạo ra một table mới thì phải chạy lệnh 

// npx prisma generate // khởi tạo
// npx prisma db push  // push lên planet db
model Billboard{
  id String @id @default(uuid())
  storeId String
  // giong khoa ngoai

  //Trong ngữ cảnh này, Prisma đang áp dụng chế độ relationMode = "prisma" để quản lý quan hệ giữa các bảng trong cơ sở dữ liệu. 
  //Khi chế độ này được sử dụng, Prisma không sử dụng các khóa ngoại mà thay vào đó sử dụng các chỉ mục để duy trì các quan hệ giữa các bảng. 
  //Tuy nhiên, khi không sử dụng khóa ngoại, không có chỉ mục nào được tạo tự động cho các trường quan hệ, điều này có thể ảnh hưởng đến hiệu suất truy vấn.
  store Store @relation( "StoreToBillboard",fields:[storeId],references: [id])
  categories Category[] @relation("BillboardToCategory")
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // solution khoa ngoai
  @@index([storeId])

}

model Category{
  id String @id @default(uuid())
  storeId String 
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard Billboard @relation("BillboardToCategory",fields: [billboardId],references: [id])
  products    Product[]   @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])

}

model Size{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize",fields: [storeId],references: [id])
  products    Product[] // Relation to Product model
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor",fields: [storeId],references: [id])
  products    Product[] // Relation to Product model
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    // Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String    // Foreign Key to Color
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   // Relation to Image model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}